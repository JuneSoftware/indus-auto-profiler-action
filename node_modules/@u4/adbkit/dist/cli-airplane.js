"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const utils_1 = __importDefault(require("./adb/utils"));
const cli_common_1 = require("./cli-common");
commander_1.program
    .command('airplane-mode-off [serials...]')
    .description('Disable airplane.')
    .action(async (serials) => {
    const devices = await (0, cli_common_1.getClientDevice)(serials);
    const process = async (device) => {
        if (await device.extra.airPlainMode(false)) {
            console.log(`[${device.serial}] airplane disabled`);
            await utils_1.default.delay(100);
            await device.extra.back();
        }
        else {
            console.log(`[${device.serial}] airplane or already enabled`);
        }
    };
    await Promise.all(devices.map(process));
});
commander_1.program
    .command('airplane-mode-on-off [serials...]')
    .description('Enable then Disable airplane.')
    .action(async (serials) => {
    const devices = await (0, cli_common_1.getClientDevice)(serials);
    const process = async (device) => {
        if (await device.extra.airPlainMode(false, 200)) {
            console.log(`[${device.serial}] airplane on-off`);
            await utils_1.default.delay(100);
            await device.extra.back();
        }
        else {
            console.log(`[${device.serial}] airplane or already enabled`);
        }
    };
    await Promise.all(devices.map(process));
});
commander_1.program
    .command('airplane-mode-on [serials...]')
    .description('Enable airplane.')
    .action(async (serials) => {
    const devices = await (0, cli_common_1.getClientDevice)(serials);
    const process = async (device) => {
        if (await device.extra.airPlainMode(true)) {
            console.log(`[${device.serial}] airplane enabled`);
            await utils_1.default.delay(100);
            await device.extra.back();
        }
        else {
            console.log(`[${device.serial}] airplane or already enabled`);
        }
    };
    await Promise.all(devices.map(process));
});
//# sourceMappingURL=cli-airplane.js.map